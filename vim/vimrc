" ----------------------------------------------------------------------
" | General Settings                                                   |
" ----------------------------------------------------------------------

" Use Vundle to manage the vim plugins
" https://github.com/gmarik/Vundle.vim

set nocompatible               " Don't make vim vi-compatibile
filetype off                   " Disable file type detection
                               " (required by Vundle)

" Set the runtime path to include Vundle
set runtimepath+=~/.vim/plugins/Vundle.vim

" Initialize Vundle and specify the path
" where the plugins should be installed
call vundle#begin('~/.vim/plugins')

    " Let Vundle manage Vundle (this is important!)
    Plugin 'gmarik/Vundle.vim'

    Plugin 'vim-scripts/peaksea'
    Plugin 'ap/vim-css-color'
    Plugin 'editorconfig/editorconfig-vim'
    Plugin 'godlygeek/tabular'
    Plugin 'nathanaelkane/vim-indent-guides'
    Plugin 'othree/html5.vim'
    Plugin 'scrooloose/nerdtree'
    Plugin 'w0rp/ale'
    Plugin 'shougo/neocomplcache.vim'
    Plugin 'shutnik/jshint2.vim'
    Plugin 'tomtom/tcomment_vim'
    Plugin 'tpope/vim-commentary'
    Plugin 'tpope/vim-fugitive'
    Plugin 'tpope/vim-repeat'
    Plugin 'tpope/vim-surround'
    Plugin 'vim-scripts/xoria256.vim'
    Plugin 'git://github.com/PyCQA/pyflakes.git'
    Plugin 'git://github.com/leafgarland/typescript-vim.git'
    Plugin 'junegunn/fzf'
    Plugin 'junegunn/fzf.vim'
    Plugin 'nvie/vim-flake8'
    Plugin 'ctrlpvim/ctrlp.vim'
    Plugin 'easymotion/vim-easymotion'
    Plugin 'mileszs/ack.vim'
    Plugin 'airblade/vim-gitgutter'
    " Snippets
    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'
call vundle#end()

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

syntax on                      " Enable syntax highlighting

if has('autocmd')
    filetype plugin indent on
    "           │     │    └──── Enable file type detection
    "           │     └───────── Enable loading of indent file
    "           └─────────────── Enable loading of plugin files
endif

set t_Co=256                   " Enable full-color support

colorscheme xoria256
" colorscheme peaksea

set autoindent                 " Copy indent to the new line

set background=dark            " Use colors that look good
                               " on a dark background

set backspace=indent           " ┐
set backspace+=eol             " │ Allow `backspace`
set backspace+=start           " ┘ in insert mode

set backupdir=~/.vim/backups   " Set directory for backup files

set backupskip=/tmp/*          " ┐ Don't create backups
set backupskip+=/private/tmp/* " ┘ for certain files

set clipboard=unnamed          " ┐
                               " │ Use the system clipboard
if has('unnamedplus')          " │ as the default register
    set clipboard+=unnamedplus " │
endif                          " ┘

set cpoptions+=$               " When making a change, don't
                               " redisplay the line, and instead,
                               " put a `$` sign at the end of
                               " the changed text

set colorcolumn=79             " Highlight certain column(s)
set cursorline                 " Highlight the current line
set directory=~/.vim/swaps     " Set directory for swap files
set encoding=utf-8 nobomb      " Use UTF-8 without BOM
set history=5000               " Increase command line history
set hlsearch                   " Enable search highlighting
set ignorecase                 " Ignore case in search patterns

set incsearch                  " Highlight search pattern as
                               " it is being typed

set laststatus=2               " Always show the status line

set listchars=tab:▸\           " ┐
set listchars+=trail:·         " │ Use custom symbols to
set listchars+=eol:↴           " │ represent invisible characters
set listchars+=nbsp:_          " ┘

set magic                      " Enable extended regexp
set mousehide                  " Hide mouse pointer while typing
set noerrorbells               " Disable error bells

set nojoinspaces               " When using the join command,
                               " only insert a single space
                               " after a `.`, `?`, or `!`

set nostartofline              " Kept the cursor on the same column
set number                     " Show line number

set numberwidth=5              " Increase the minimal number of
                               " columns used for the `line number`

set report=0                   " Report the number of lines changed
set ruler                      " Show cursor position

set scrolloff=5                " When scrolling, keep the cursor
                               " 5 lines below the top and 5 lines
                               " above the bottom of the screen

set shortmess=aAItW            " Avoid all the hit-enter prompts
set showcmd                    " Show the command being typed
set showmode                   " Show current mode
set spelllang=en_us            " Set the spellchecking language

set smartcase                  " Override `ignorecase` option
                               " if the search pattern contains
                               " uppercase characters

set synmaxcol=2500             " Limit syntax highlighting (this
                               " avoids the very slow redrawing
                               " when files contain long lines)

set tabstop=4                  " ┐
set softtabstop=4              " │ Set global <TAB> settings
set shiftwidth=4               " │ http://vimcasts.org/e/2
set expandtab                  " ┘

set ttyfast                    " Enable fast terminal connection
set undodir=~/.vim/undos       " Set directory for undo files
set undofile                   " Automatically save undo history
set virtualedit=all            " Allow cursor to be anywhere

set visualbell                 " ┐
set noerrorbells               " │ Disable beeping and window flashing
set t_vb=                      " ┘ https://vim.wikia.com/wiki/Disable_beeping

set wildmenu                   " Enable enhanced command-line
                               " completion (by hitting <TAB> in
                               " command mode, Vim will show the
                               " possible matches just above the
                               " command line with the first
                               " match highlighted)

set winminheight=0             " Allow windows to be squashed


" ----------------------------------------------------------------------
" | Helper Functions                                                   |
" ----------------------------------------------------------------------

function! GetGitBranchName()

    let branchName = ""

    if exists('g:loaded_fugitive')
        let branchName = '[' . fugitive#head() . ']'
    endif

    return branchName

endfunction

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function! StripTrailingWhitespaces()

    " Save last search and cursor position
    let searchHistory = @/
    let cursorLine = line('.')
    let cursorColumn = col('.')

    " Strip trailing whitespaces
    %s/\s\+$//e

    " Restore previous search history and cursor position
    let @/ = searchHistory
    call cursor(cursorLine, cursorColumn)

endfunction

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function! ToggleLimits()

    " [51,73]
    "   - git commit message
    "     http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
    " [81]
    "   - general use

    if ( &colorcolumn == '73' )
        set colorcolumn+=51,81
    else
        set colorcolumn-=51,81
    endif

endfunction

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function! ToggleRelativeLineNumbers()
    if ( &relativenumber == 1 )
        set number
    else
        set relativenumber
    endif
endfunction

" ----------------------------------------------------------------------
" | Automatic Commands                                                 |
" ----------------------------------------------------------------------

if has('autocmd')

    " Autocommand Groups
    " http://learnvimscriptthehardway.stevelosh.com/chapters/14.html

    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    " Automatically reload the configurations from the
    " `~/.vimrc` and `~/.gvimrc` files whenever they are changed

    augroup auto_reload_vim_configs
        autocmd!
        autocmd BufWritePost vimrc source $MYVIMRC
    augroup END

    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    " Use relative line numbers
    " http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/

    augroup relative_line_numbers
        autocmd!
        " Automatically switch to absolute line numbers when vim loses focus
        autocmd FocusLost * :set number
        " Automatically switch to relative line numbers when vim gains focus
        autocmd FocusGained * :set relativenumber
        " Automatically switch to absolute line numbers when vim is in insert mode
        autocmd InsertEnter * :set number
        " Automatically switch to relative line numbers when vim is in normal mode
        autocmd InsertLeave * :set relativenumber
    augroup END

    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    " Automatically strip the trailing whitespaces when files are saved

    "augroup strip_trailing_whitespaces
    "    autocmd!
    "    autocmd BufWritePre * :call StripTrailingWhitespaces()
    "augroup END

endif


" ----------------------------------------------------------------------
" | Key Mappings                                                       |
" ----------------------------------------------------------------------

" Use a different mapleader (default is '\')
let mapleader = ','

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,* ] Search and replace the word under the cursor
nmap <leader>* :%s/\<<C-r><C-w>\>//<Left>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,cc] Toggle code comments
" https://github.com/tomtom/tcomment_vim
map <leader>cc :TComment<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,cr] Calculate result
" http://vimcasts.org/e/56
nmap <leader>cr 0yt=A<C-r>=<C-r>"<CR><Esc>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,cs] Clear search
map <leader>cs <Esc>:noh<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,h ] JSHint the code
" https://github.com/Shutnik/jshint2.vim
nmap <leader>h :JSHint<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,l ] Toggle `set list`
nmap <leader>l :set list!<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,n ] Toggle `set relativenumber`
nmap <leader>n :call ToggleRelativeLineNumbers()<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,ss] Strip trailing whitespace
nmap <leader>ss :call StripTrailingWhitespaces()<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,ti] Toggle indent
nmap <leader>ti <Plug>IndentGuidesToggle

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,tl] Toggle show limits
nmap <leader>tl :call ToggleLimits()<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [Ctrl+n] Toggle NERDTree
map <C-n> :NERDTreeToggle<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,ts] Toggle Syntastic
nmap <leader>ts :SyntasticToggleMode<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,v ] Make the opening of the `.vimrc` file easier
nmap <leader>v :vsp $MYVIMRC<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,W ] Sudo write
map <leader>W :w !sudo tee %<CR>


" ----------------------------------------------------------------------
" | Plugins                                                            |
" ----------------------------------------------------------------------

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" Indent Guides

" Set custom indent colors
" https://github.com/nathanaelkane/vim-indent-guides#setting-custom-indent-colors
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=13  guibg=#d33682
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=237 guibg=#073642

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" NeoComplCache

" Enable `neocomplcache` by default
" https://github.com/Shougo/neocomplcache.vim#installation
let g:neocomplcache_enable_at_startup=1

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
"

" Syntastic
"let g:flake8_cmd="/home/sima/venv-vim/bin/flake8"
" Installing Python 2.7 on Centos 6.5
" https://gist.github.com/dalegaspi/dec44117fa5e7597a559
" yum update # update yum
" yum install centos-release-scl # install SCL
" yum install python27 # install Python 2.7
" scl enable python27 bash
" pip2.7 install --user flake8 --upgrade
" let g:syntastic_python_python_exec = '/opt/rh/python27/root/usr/bin/python'
" let g:syntastic_python_flake8_exec='/opt/rh/python27/root/usr/bin/python'
" let g:flake8_cmd="/home/shared/sima/.local/bin/flake8"
"
" " Inform Syntastic which checkers to use based on file types
" " https://github.com/scrooloose/syntastic#3-faq
" let g:syntastic_html_checkers = [ 'jshint', 'validator' ]
" let g:syntastic_javascript_checkers = [ 'jscs', 'jshint' ]
" let g:syntastic_python_checkers = ['pep8']
" let g:syntastic_css_checkers = ['csslint']
" let g:syntastic_less_checkers = ['lessc']
" let g:syntastic_typescript_checkers = ['eslint', 'tslint']
" let g:syntastic_xml_checkers = [ 'xmllint' ]

" let g:syntastic_python_flake8_post_args='--ignore=E402'
" let g:syntastic_python_pep8_post_args='--ignore=E402'
"
" " Disable syntax checking by default
" let g:syntastic_mode_map = {
"     \ 'active_filetypes': ['python', 'html', 'javascript', 'css', 'less', 'typescript'],
"     \ 'mode': 'active',
"     \ 'passive_filetypes': []
" \}

" UltiSnips
"
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" ----------------------------------------------------------------------
" | Status Line                                                        |
" ----------------------------------------------------------------------

" Terminal types:
"
"   1) term  (normal terminals, e.g.: vt100, xterm)
"   2) cterm (color terminals, e.g.: MS-DOS console, color-xterm)
"   3) gui   (GUIs)

highlight ColorColumn
    \ term=NONE
    \ cterm=NONE  ctermbg=237    ctermfg=NONE
    \ gui=NONE    guibg=#073642  guifg=NONE

highlight CursorLineNr
    \ term=bold
    \ cterm=bold  ctermbg=NONE   ctermfg=178
    \ gui=bold    guibg=#073642  guifg=Orange

highlight LineNr
    \ term=NONE
    \ cterm=NONE  ctermfg=241    ctermbg=NONE
    \ gui=NONE    guifg=#839497  guibg=#073642

highlight User1
    \ term=NONE
    \ cterm=NONE  ctermbg=237    ctermfg=Grey
    \ gui=NONE    guibg=#073642  guifg=#839496

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set statusline=
set statusline+=%1*            " User1 highlight
set statusline+=\ [%n]         " Buffer number
set statusline+=\ %{GetGitBranchName()} " Git branch name
set statusline+=\ [%f]         " Path to the file
set statusline+=%m             " Modified flag
set statusline+=%r             " Readonly flag
set statusline+=%h             " Help file flag
set statusline+=%w             " Preview window flag
set statusline+=%y             " File type
set statusline+=[
set statusline+=%{&ff}         " File format
set statusline+=:
set statusline+=%{strlen(&fenc)?&fenc:'none'} " File encoding
set statusline+=]
set statusline+=%=             " Left/Right separator
set statusline+=%c             " File encoding
set statusline+=,
set statusline+=%l             " Current line number
set statusline+=/
set statusline+=%L             " Total number of lines
set statusline+=\ (%P)\        " Percent through file

" Example result:
"
"  [1] [master] [vim/vimrc][vim][unix:utf-8]            17,238/381 (59%)


" ----------------------------------------------------------------------
" | Local Settings                                                     |
" ----------------------------------------------------------------------

" Load local settings if they exist
if filereadable(glob('~/.vimrc.local'))
    source ~/.vimrc.local
endif


hi ExtraWhitespace ctermbg=red guibg=red
au BufEnter,BufCreate,BufRead,WinEnter * call matchadd('ExtraWhitespace', '\s\+$', -1)

" BEGIN status bar
" HOW TO SHOW status bar on 2 lines:
if version >= 700
    :set laststatus=2

    function! GetCurrentPythonStringForStatusBar()
        " TODO: support: if __name__ == '__main__':

        " Define the style to display the class name and function name
        let classHi = '%#statusbar_class#'
        let functionHi = '%#statusbar_function#'
        let punctuationHi = '%#perso1#'

        " Search the first class method definition before the current position
        let classFunctionLineNumber = search('^    def', 'bncW')

        " Search the first function definition before the current position
        let simpleFunctionLineNumber = search('^def', 'bncW')

        " Search the first class definition before the current position
        let classLineNumber = search('^class', 'bncW')


        let className = classHi.substitute(getline(classLineNumber), '^class \([^(: ]*\).*', '\1', '')

        if classFunctionLineNumber < classLineNumber && simpleFunctionLineNumber < classLineNumber
            " We have found in first a class definition so we only return it
            return className
        endif

        if classFunctionLineNumber < simpleFunctionLineNumber
            " the function definition is found before the a method so we only return the function name
            return functionHi.substitute(getline(simpleFunctionLineNumber), '^[ ]*def \([^( ]*\).*', '\1', '')
        endif

        " return the class and the function name
        return className.punctuationHi.'.'.functionHi.substitute(getline(classFunctionLineNumber), '^[ ]*def \([^( ]*\).*', '\1', '')

    endfunction


    function! GetMainStatusBar()
        return '%#perso1#%F '.GetCurrentPythonStringForStatusBar().' %#perso1#%=buffer %0n  %4l/%-4L %3p%% %3c'
    endfunction


    function! GetSecondaryStatusBar()
        return '%#SpecialKey#%{getcwd()}      %F'
    endfunction


    let s:statusline={0: '%!GetMainStatusBar()', 1:'%!GetSecondaryStatusBar()' }
    let s:currentStatusLine = 1

    function! ToggleStatusLine()
        let s:currentStatusLine = s:currentStatusLine + 1
        if (s:currentStatusLine > 1)
            let s:currentStatusLine=0
        endif
        let &statusline=s:statusline[s:currentStatusLine]
    endfunction

    call ToggleStatusLine() "Init
    map <silent><C-space> :call ToggleStatusLine()<CR>
endif
" END status bar


" Fuzzy finder
set rtp+=~/.fzf

let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'
let $FZF_DEFAULT_OPTS = '--no-mouse'

" Ignore files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc     " MacOSX/Linux
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

" ack.vim
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

" ALE
let g:ale_linters = {
\   'python': ['pyflakes', 'pycodestyle', 'pylint'],
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'python': ['autopep8'],
\}
let g:ale_python_pylint_executable = '/home/sima/venvs/a9engine/bin/pylint'
let g:ale_python_pylint_options = '--py3k'
" let g:ale_python_pylint_options = '--disable=invalid-name,missing-docstring'
let g:ale_python_pylint_use_global=1

" Only run linting when saving the file
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0

" NERD
let g:NERDTreeWinPos = "right"
let NERDTreeShowHidden=0
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let g:NERDTreeWinSize=35

set tags=tags
set path=.
